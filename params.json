{
  "name": "Custom-select",
  "tagline": "A lightweight JS script for custom select creation.",
  "body": "# custom-select\r\nA lightweight JS script for custom select creation.\r\nNo dependencies needed.\r\n\r\n\r\n## Install\r\nDownload the minified build file [here](https://raw.githubusercontent.com/gionatan-lombardi/custom-select/master/build/index.min.js).\r\n\r\nOr install with npm:\r\n```\r\n$ npm install --save custom-select\r\n```\r\n\r\n## Use\r\nIn HTML with the `script` tag:\r\n```html\r\n<script src=\"index.min.js\" type=\"text/javascript\"></script>\r\n```\r\nWith ES6 modules via the `import` statement:\r\n```js\r\nimport customSelect from 'custom-select';\r\n```\r\nIn CommonJs environments with the `require` function:\r\n```js\r\nvar customSelect = require(\"custom-select\").default;\r\n```\r\n**Note**: the `require().default` is necessary due to the babelify export system.\r\n\r\n## How it works\r\nStart with a simple HTML `<select>`:\r\n```html\r\n<select id=\"mySelect\">\r\n  <option value>Select...</option>\r\n  <option value=\"foo\">Foo</option>\r\n  <option value=\"buz\">Buz</option>\r\n</select>\r\n```\r\n```js\r\ncustomSelect('select');\r\n```\r\n**Important**: Don't nest the select inside a label! Use instead the `for` attribute on the label.\r\n\r\nHere's the HTML result:\r\n```html\r\n<div class=\"custom-select-container customSelect\">\r\n  <span class=\"custom-select-opener\" tabindex=\"0\">\r\n    <span>Select...</span>\r\n  </span>\r\n  <select id=\"mySelect1\">\r\n    <option value>Select...</option>\r\n    <option value=\"foo\">Foo</option>\r\n    <option value=\"buz\">Buz</option>\r\n  </select>\r\n  <div class=\"custom-select-panel\">\r\n    <div class=\"custom-select-option is-selected has-focus\" data-value=\"\">Select...</div>\r\n    <div class=\"custom-select-option\" data-value=\"foo\">Foo</div>\r\n    <div class=\"custom-select-option\" data-value=\"buz\">Buz</div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nAlso [state classes](#state-classes) will be added and removed while plugin working.\r\nYou can style it by yourself via css, check the examples for inspirations.\r\n\r\n## Plugin init\r\n```js\r\nArray customSelect(elements[, pluginOptions]);\r\n```\r\n\r\nThe *elements* parameter could be:\r\n\r\nA DOMString selectors:\r\n```js\r\ncustomSelect('.myForm .mySelect');\r\n```\r\n\r\nA instance of HTMLElement, tag SELECT:\r\n```js\r\ncustomSelect(document.getElementById('mySelect'));\r\n```\r\n\r\nA list (NodeList, HTMLCollection, Array, etc) of instances of HTMLElement, tag SELECT:\r\n```js\r\ncustomSelect(document.querySelector('.mySelect'));\r\n//or\r\ncustomSelect(document.getElementsByClassName('mySelect'));\r\n```\r\n\r\n\r\nThe *pluginOptions* parameter is an object that overwrites some default plugin configurations.\r\n\r\nThe default config is:\r\n```js\r\n{\r\n  containerClass: 'custom-select-container',\r\n  openerClass: 'custom-select-opener',\r\n  panelClass: 'custom-select-panel',\r\n  optionClass: 'custom-select-option',\r\n  optgroupClass: 'custom-select-optgroup',\r\n  isSelectedClass: 'is-selected',\r\n  hasFocusClass: 'has-focus',\r\n  isDisabledClass: 'is-disabled',\r\n  isActiveClass: 'is-active',\r\n  isOpenClass: 'is-open'\r\n}\r\n```\r\n\r\nThe return is an Array of customSelect [instances](#how-to-get-plugin-instance), that contains all the public exposed [methods and properties](#methods--properties).\r\n\r\n## Style Classes\r\nAll css classes can be configured using *pluginOptions*, but container secondary class, `customSelect`, is only for internal use and should not be removed or used for styling purpose.\r\n\r\n### Structure Classes\r\n\r\nSelf explained structure classes, and relative may-have status classes:\r\n\r\n`containerClass: 'custom-select-container'` may have `isDisabledClass`\r\n\r\n`openerClass: 'custom-select-opener'` may have `isActiveClass`\r\n\r\n`panelClass: 'custom-select-panel'` may have `isOpenClass`\r\n\r\n`optionClass: 'custom-select-option'` may have `isSelectedClass`, `hasFocusClass`\r\n\r\n`optgroupClass: 'custom-select-optgroup'`\r\n\r\n### State Classes\r\n\r\n`isSelectedClass: 'is-selected'` - when the custom option is selected (as native selected attribute).\r\n\r\n`hasFocusClass: 'has-focus'` - when the custom option has current focus (mouseover, arrow navigation and keyboard autocomplete changes the focus).\r\n\r\n`isDisabledClass: 'is-disabled'` - when the select is disabled.\r\n\r\n`isActiveClass: 'is-active'` - when the opener is active (the panel is open).\r\n\r\n`isOpenClass: 'is-open'` - when the panel is open.\r\n\r\n## How to get Plugin instance\r\n\r\nInit return\r\n```js\r\nconst cstSel = customSelect('select');\r\nconsole.log(cstSel.open); // true|false\r\n```\r\nThe DOM select\r\n```js\r\ncustomSelect('select');\r\nconst cstSel =  document.querySelector('select').customSelect\r\nconsole.log(cstSel.open); // true|false\r\n```\r\nThe DOM select container\r\n```js\r\ncustomSelect('select');\r\nconst cstSel =  document.querySelector('.customSelect').customSelect\r\nconsole.log(cstSel.open); // true|false\r\n```\r\n\r\n## Methods & Properties\r\n\r\n### pluginOptions\r\nGet the plugin options.\r\n```js\r\ncstSel.pluginOptions();\r\n```\r\n\r\n### open\r\nGet/set property.\r\n```js\r\ncstSel.open = true; // open the custom select\r\nconsole.log(cstSel.open); // true\r\ncstSel.open = false; // close the custom select\r\nconsole.log(cstSel.open); // false\r\n```\r\n\r\n### disabled\r\nGet/set property.\r\n```js\r\ncstSel.disabled = true; // disable the custom select\r\nconsole.log(cstSel.disabled); // true\r\ncstSel.disabled = false; // enable the custom select\r\nconsole.log(cstSel.disabled); // false\r\n```\r\n\r\n### value\r\nGet/set property.  \r\nChange both the native select and the custom select. Use it just like nativeSelect.value\r\n```js\r\ncstSel.value = 'foo'; // the first option with that value will be selected. If there is no option with that value the first one'll be selected.\r\nconsole.log(cstSel.value); // return foo if there was an option with 'foo' value\r\n```\r\n\r\n### append(elements[, target])\r\nAppend an option or an optgroup to the select.\r\n```js\r\nconst option = document.createElement('option');\r\noption.text = 'Foo';\r\noption.value = 'bar';\r\ncstSel.append(option);\r\n```\r\n\r\nThe *elements* parameter could be:\r\n\r\nAn instance of HTMLElement, tag OPTION:\r\n```js\r\nconst toBeAppend = document.createElement('option');\r\n```\r\nAn instance of HTMLElement, tag OPTGROUP:\r\n```js\r\nconst toBeAppend = document.createElement('optgroup');\r\n```\r\nA list (NodeList, HTMLCollection, Array, etc) of instance of HTMLElement, tag OPTION/OPTGROUP:\r\n```js\r\nconst toBeAppend = cstSel.empty();\r\n```\r\n\r\nThe *target* parameter must be the `select` **(default)** or an optgroup that is already inside the select.\r\n\r\n### insertBefore(elements, target)\r\ninsert an option or an optgroup before the specified target.\r\n```js\r\nconst option = document.createElement('option');\r\noption.text = 'Foo';\r\noption.value = 'foo';\r\nconst target = cstSel.select.options[2];\r\ncstSel.insertBefore(option, target);\r\n```\r\n\r\nThe *elements* parameter could be:\r\n\r\nAn instance of HTMLElement, tag OPTION:\r\n```js\r\nconst toBeAppend = document.createElement('option');\r\n```\r\nAn instance of HTMLElement, tag OPTGROUP:\r\n```js\r\nconst toBeAppend = document.createElement('optgroup');\r\n```\r\nA list (NodeList, HTMLCollection, Array, etc) of instance of HTMLElement, tag OPTION/OPTGROUP:\r\n```js\r\nconst toBeAppend = cstSel.empty();\r\n```\r\n\r\nThe *target* parameter must be an `option` or an `optgroup` that is already inside the select.\r\n\r\n### remove(node)\r\nremove an option or an optgroup\r\n```js\r\ncstSel.remove(cstSel.select.options[1]);\r\n```\r\n\r\n### empty()\r\nempty the select\r\n```js\r\ncstSel.empty();\r\n```\r\n\r\n### destroy()\r\ndestroy the plugin, removing custom markup, classes, and listeners.\r\n```js\r\ncstSel.destroy();\r\n```\r\n\r\n### opener\r\nDOM Element\r\n\r\n### select\r\nDOM Element\r\n\r\n### panel\r\nDOM Element\r\n\r\n### container\r\nDOM Element\r\n\r\n\r\n## Events\r\n\r\n### custom-select.open\r\nOnly on `container`.\r\n```js\r\ncstSel.container.addEventListener('custom-select.open',\r\n  (e) => { console.log(`${e.target} is open 😊`)});\r\n```\r\n\r\n### custom-select.close\r\nOnly on `container`.\r\n```js\r\ncstSel.container.addEventListener('custom-select.close',\r\n  (e) => { console.log(`${e.target} is closed 😔`)});\r\n```\r\n\r\n### custom-select.disabled\r\nOnly on `container`.\r\n```js\r\ncstSel.container.addEventListener('custom-select.disabled',\r\n  (e) => { console.log(`${e.target} is disabled 👋`)});\r\n```\r\n\r\n### custom-select.enabled\r\nOnly on `container`.\r\n```js\r\ncstSel.container.addEventListener('custom-select.enabled',\r\n  (e) => { console.log(`${e.target} is enabled 👏`)});\r\n```\r\n\r\n### custom-select.focus-outside-panel\r\nRecommended on `panel`.  \r\nThis `CustomEvent` fires when the focused option moves outside the visible part of the `panel`.  \r\nIt bubbles, so the listener can be placed on every ancestor of the custom options.  \r\nThis event is useful for custom animations on select's autocomplete-search, when the focus moves to the found option.\r\nBy default there's no animation but a simply `scrollTop` change of the `panel`.  \r\nYou can overwrite this behaviour by simply adding an `EventListener`, with `useCapture` argument set to `true` and an `e.stopPropagation()` statement inside you listener's callback-function.\r\n```js\r\n// Example with jQuery animate\r\ncstSel.panel.addEventListener('custom-select.focus-outside-panel',\r\n  (e) => {\r\n    e.stopPropagation();\r\n    $(cstSel.panel).animate({\r\n      scrollTop: e.target.offsetTop,\r\n    }, 300)\r\n  }, true);\r\n```\r\n\r\n### change\r\nOnly on `select`.\r\n```js\r\ncstSel.select.addEventListener('change',\r\n  (e) => { console.log(`${e.target} has changed it's value 👌`)});\r\n```\r\n\r\n## That's all!\r\n**And now have fun ✌**\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}